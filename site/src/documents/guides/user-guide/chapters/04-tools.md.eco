# Tools<a id="tools"></a>

The camunda bpm stacks currently includes three web apps build on a HTML 5 plus [REST](<%= @docUrl('api-references/rest/') %>) architectur:

* [Cycle](#tools/cycle) for synchronization of process models in different repositorys.
* [Tasklist](#tools/tasklist), a demo application for humen workflow management.
* [Cockpit](#tools/cockpit), a monitoring tool for process operations.

All applications are part of our camunda BPM distribution and ready to use! 

## Cycle<a id="tools/cycle"></a>

### What is Cycle?<a id="tools/cycle/what-is-cycle"></a>

With Cycle you can synchronize the BPMN diagrams in your business analystsâ€™ BPMN tool with the technically executable BPMN 2.0 XML files your developers edit with their Modeler (e.g. in Eclipse). Depending on your tool we can realize a forward- and a reverse engineering, while you can store your BPMN 2.0 XML files in different repositories (e.g. SVN, file system or FTP servers).

Although business and IT use different BPMN tools, the process models keep in synch: With camunda Cycle you can synchronize BPMN diagrams in the toolchain anytime, for forward engineering as well as reverse engineering. By connecting and continuously synchronizing the process models in both environments, we keep business and IT aligned. This is what we call a fully working BPM roundtrip.

The typical use cases are: 

* Synchronize a BPMN 2.0 diagram with an executable diagram (Forward Engineering)
* Update the executable diagram and synchronize the changes with the origin BPMN 2.0 diagram (Reverse Engineering)
* Create executable diagram out of BPMN 2.0 diagram (Forward Engineering)

Cycle is part of our camunda BPM distribution and ready to use by opening http://localhost:8080/cycle. At first time start up you will be prompt to create an Admin User.
If you are new to Cycle have a look at our Hands-On <a href="http://www.camunda.org/design/cycle-tutorial.html">Cycle Tutorial</a>.

### Connector Configuration<a id="tools/cycle/connector-configuration"></a>

To connect Cycle to a suitable repository you can setup one of the following connectors: 

* [Signavio Connector](#tools/cycle/connector-configuration/signavio-connector) 
* [Subversion Connector](#tools/cycle/connector-configuration/subversion-connector)
* [File System Connector]((#tools/cycle/connector-configuration/file-system-connector)

Furthermore you get information about how to configure [User Credentials](#tools/cycle/connector-configuration/user-credentials) for your connector.

#### Signavio Connector<a id="tools/cycle/connector-configuration/signavio-connector"></a>

For directly accessing your process models stored in Signavio, you must setup a Signavio Connector. The picture below shows a connector setup for Signavio's SaaS edition with globally provided [credentials](#tools/cycle/connector-configuration/user-credentials), meaning that every Cycle user connects with the same credentials to the repository. If you are behind a proxy, you could configure that here as well.

<div class="row-fluid">
  <div id="cycle-add-signavio-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-signavio-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### Subversion Connector<a id="tools/cycle/connector-configuration/subversion-connector"></a>

Use the Subversion Plugin to connect to a subversion repository like SVN or Git Hub. You must specify the URL (including subfolders, if you want to directly point to a certain folder in the Subversion repository). If [user credentials](#tools/cycle/connector-configuration/user-credentials) are mandatory, you can provide them either globally, or individually for each Cycle user. In the picture below you see a connector setup for a Git Hub repository. The user credentials are provided globaly. 

<div class="row-fluid">
  <div id="cycle-add-subversion-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-svn-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### File System Connector<a id="tools/cycle/connector-configuration/file-system-connector"></a>

Use the File System Connector to use models stored on your local system. Select the File System Connector as connecotr plugin. The variable `${user.home}` points to the directory of your OS user Account. You can also choose an absolute path like `C:\MyFolder`. 

<div class="row-fluid">
  <div id="cycle-add-file-system-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-file-system-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### User Credentials<a id="tools/cycle/connector-configuration/user-credentials"></a>

If your repository requires a login you can choose between credentials provided by user or globally provided ones. Globally provided credentials can be set directly in the connector set up menu and are valid for every cycle user.

<div class="row-fluid">
  <div id="cycle-globally-credentials" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-globally-credentials.png') %>"></div>
</div>

To setup credentials provided by the user you need to enter the `My Profile` menue and select `add credentials` for your connector. 

<div class="row-fluid">
  <div id="cycle-user-credentials" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-user-credentials.png') %>"></div>
</div>

Hit `Test` to check if the credentials are valid. 

### BPMN 2.0 Roundtrip<a id="tools/cycle/bpmn-20-roundtrip"></a>

When we are takling about Rountrips we are talking about the synchronisation of BPMN 2.0 diagrams between the business perspective and the technical perspective. This synchronization is based on the standard BPMN 2.0 XML format. As on the technical site only executable processes matter Cycle provides the functionality to extract these processes out of models from the business side where manual processes (not executable) can be modelled as well. This extraction mechanism is what we call [Pool Extraction](#tools/cycle/bpmn-20-roundtrip/pool-extraction). With Cycle, you can do this synchronisation in both directions. 

<h4>Step 1: Setup the Connector</h4>
<div class="row-fluid">
  <div id="cycle-signavio-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-signavio-connector.png') %>" ></div>
    <div class="span8">
      <p>
        Setup a suitable connector for your repository as described in the section [Connector Configuration](#tools/cycle/connector-configuration).
        In this walkthrough we use a Signavio connector with user provided credentials.</p>
      <p> Hit `Test` to check if Cycle can access your Signavio account.</p>
    </div>
</div>
<h4>Step 2: Add process model from the repository</h4>
<div class="row-fluid">
  <div id="signavio-choose-model" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/signavio-choose-model.png') %>" ></div>
    <div class="span8">
       <p>In the left box of your roundtrip, click on `Add process Model`, pick a name for your modelling tool and choose the Signavio connector from the connectors dropdown. Cycle now connects with Signavio, so after a short time you can navigate through the choosen repository to select your process model.</p>
       <p>After you hit `Add`, Cycle will save a link to the process model you selected, and offers you a preview image in the left box of your roundtrip. It also says that the process model has not yet been synchronized, which is true. Changes on the diagram in Signavio will be updated automaticaly by Cycle.</p>
    </div>
</div>
<h4>Step 3: Create BPMN file for execution</h4>
<div class="row-fluid">
  <div id="cycle-create-executable" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-create-executable.png') %>" ></div>
    <div class="span8">
      <p>Hit `Create` and choose the location you want the BPMN 2.0 XML File to be stored to. In our example, we want to store it on our local file system, in a workspace we use with our Eclipse IDE. After hitting `Create`, Cycle will connect to Signavio, request the BPMN 2.0 XML and save it to the location you specified. Please note that no diagram picture will be displayed until an image file of the diagram is stored in the folder. Cycle indicates that both models are in "In synch" now.</p>
      <p><b>Heads up!</b> If your process model is a collaboration diagram, Cycle will do a [Pool Extraction](#cycle-pool-extraction) which means that only pools will be regarded that are executable.</p>
  </div>
</div>
<h4>Step 4: Edit BPMN File</h4>
<div class="row-fluid">
  <div id="cycle-signavio-created" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/signavio-created.png') %>" ></div>
    <div class="span8">
      <p>Now Cycle shows you that your roundtrip consists of the BPMN diagram stored in Signavio (left side) and the BPMN 2.0 File stored in your file repository (right side). You can also see that the two process models are currently in synch, and the date and time since the last synch has been made.</p>
      <p>You can now either check out the BPMN 2.0 - XML from your Subversion or open it directly in your local drive. In both cases, you can now edit inside your Eclipse IDE it using <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a>.</p>      
    </div>
</div>
<h4>Step 5: Reverse Engineering</h4>
<div class="row-fluid">
  <div id="cycle-reverse" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-reverse.png') %>" ></div>
    <div class="span8">
      <p>After you have worked on the executable process model the models are out of synch, indicated by the red label "change since last sync" on the site where the change happend.</p>
      <p>You can now hit the sync button in the corresponding direction (in our case from right to left). Afterwards you will be prompt to confirm the syncronization with the possibility to add a commit message.</p>
      <p>Now both models are synchronized again, indicated by green labels "In sync" on both sites.</p> 
    </div>
</div>
<div class="alert">
    Please note! The BPMN 2.0 modelling tool must support the complete BPMN 2.0 standard and must be able to export/serialize process diagrams in valid BPMN 2.0 XML files. 
    For more detailed information about requirements and suitable tools check the section "Roundtrip with other Tools" in our <a href="http://www.camunda.org/design/cycle-tutorial.html">Cycle Tutorial</a>.
</div>

#### Pool Extraction<a id="tools/cycle/bpmn-20-roundtrip/pool-extraction"></a>

During a roundtrip from business perspective to a technical process diagram Cycle checks which pools are flagged as "executable". Only those pools will actually be synchronized for the executable process model, so you don't have to bother with huge diagrams describing manual flows. We call this feature "Pool Extraction". 
When you synchronize the executable diagram again with the origin diagram the "non executable" pools will be merged back into the diagram. No information gets lost. 

The following example shows relevant xml tag:

    <process id="sid-8E90631B-169F-4CD8-9C6B-1F31121D0702" name="MyPool" isExecutable="true">

#### Engine Attributes<a id="tools/cycle/bpmn-20-roundtrip/engine-attributes"></a>

An executable process model usually contains engine specific attributes in the BPMN 2.0 XML. So we have to make sure, that these attributes are not lost during a roundtrip with an other tool. The BPMN 2.0 Standard explicitly defines an extension mechanism for these attributes in the XML. That means, that a proper BPMN 2.0 import and export functionality must keep the engine attributes, event if they are added as an engine extension. 

The camunda BPM Process Engine uses multitude attributes for configuration purpose which can be setup in the <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a>. Cycle retains these attributes during the roundtrip. Here is an example:

The xml export from Signavio modeler contains no engine attributes:

      <serviceTask completionQuantity="1" id="sid-01234"
                   implementation="webService"
                   isForCompensation="false"
                   name="MyService"
                   startQuantity="1"/>

 After update with camunda modeler class and failedJobRetryTimeCycle where added as camunda specific engine attributes:

      <serviceTask id="sid-01234" camundabpm:class="java.lang.Object" 
                   camundabpm:async="true" 
                   name="MyService" 
                   implementation="webService">
        <extensionElements>
          <camundabpm:failedJobRetryTimeCycle>R3/PT10M</camundabpm:failedJobRetryTimeCycle>
        </extensionElements>
        <incoming>sid-3DED1BA0-77FC-4768-AA3E-0B60A81850EA</incoming>
        <outgoing>sid-E6D3AB73-386C-4260-82B9-CB740B82001F</outgoing>
      </serviceTask>                   

After synchronization back to Signavio the origin Signavio-information like completionQuantity, isForCompensation and startQuantity where merged back:

      <serviceTask camundabpm:async="true" camundabpm:class="java.lang.Object" 
                  completionQuantity="1" 
                  id="sid-01234" 
                  isForCompensation="false" 
                  name="MyService" 
                  startQuantity="1">
         <extensionElements>
            <camundabpm:failedJobRetryTimeCycle xmlns:camundabpm="http://www.camunda.com/camundabpm">R3/PT10M</camundabpm:failedJobRetryTimeCycle>
         </extensionElements>
         <incoming>sid-3DED1BA0-77FC-4768-AA3E-0B60A81850EA</incoming>
         <outgoing>sid-E6D3AB73-386C-4260-82B9-CB740B82001F</outgoing>
      </serviceTask>

## Tasklist<a id="tools/tasklist"></a>

### What is Tasklist?<a id="tools/tasklist/what-is-tasklist"></a>

The Tasklist is a demo web application to provide you the possibility to work on User Tasks. The Tasklist is part of our camunda BPM distribution and ready to use by opening http://localhost:8080/tasklist.

<div class="alert">
  <p>
    <strong>Please note!</strong>
    The tasklist can serve as a basis to develop your own tasklist. Please note that we do not want to provide a tasklist usable in every environment. We think this is not a good idea because normally you face different UI's (JSF, Portals, Vaadin, Wicket, Struts, PHP, ...) in every project and you may want to embed the tasklist into your application or architecture standards. That is why we provide you with a demo tasklist, which you may want to copy and start off your own project, or you just use it as inspiration to write your own.
  </p>
</div>

Find additional information about how to use the Tasklist in our <a href="http://www.camunda.org/get-started/developing-process-applications.html">Developing Process Applications</a> tutorial.

### Human Workflow Management<a id="tools/tasklist/human-workflow-management"></a>

In the following example we walk through a typical humen worklow scenario. The Tasklist has four demo users which belong to different user groups. Sign in with the user _demo_ and start a process instance.

#### Start a Process<a id="tools/tasklist/human-workflow-management/start-a-process"></a>

<div class="row-fluid">
  <div id="tasklist-start-process" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-start-process.png') %>">
  </div>
  <div class="span8">
    <p>To start a process instance via the Tasklist hit the <button class="btn btn-mini"><i class="caret"></i> Start a Process </button> dropdown button and select a process. If there is no process listed please check that your process is deployed correctly.</p>
    <p>Depending on whether you have defined a [start form](#tools/tasklist/task-forms) for your process it will be displayed now. Otherwise you get the notification that no form has been defined for starting the process. In this case click on `Start process using generic form`. The [generic task form](#tools/tasklist/task-forms/generic-task-forms) allows you to enter variables for your process.</p>
    <p>In our example you have to enter the desired values and hit `Start Process` to step through</p>
  </div>
</div>

#### Working on Tasks / Task Completion<a id="tools/tasklist/human-workflow-management/work-on-tasks"></a>

Tasks that are assigned to you are listed on the Tasklist main page where you can hit the <button class="btn btn-mini"><i class="icon-play"></i> </button> button to start working on a task. 
<div class="row-fluid">
  <div id="tasklist-form-assign-approver" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-form-assign-approver.png') %>"></div>
  <div class="span8">
     <p>In our example [task form](#tools/tasklist/task-forms) you are asked to assign an approver for your invoice. Enter a colleagues name who should be assigned to approve the task. Have a look at the [Task Overview](#tools/tasklist/human-workflow-management/user-and-group-task-overview). The assigned task is now in the folder of your colleague.</p>
     <p>If no task form is defined for a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> you will be forwarded to a [generic form](#tools/tasklist/task-forms/generic-task-forms). In a generic form you can define the input data by yourself.</p>
  </div>
</div>

When you complete a task by submitting the Task Form, the task is completed and the process continues in the engine.

<div class="row-fluid">
  <div id="tasklist-diagram" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-diagram.png') %>"></div>
  <div class="span8">
    Furthermore you can visualize the process model by clicking on the <button class="btn btn-mini" title="Display BPMN Diagram"><i class="icon-search"></i></button> symbol. By highlighting the current task the visualization gives you also information your task in the context of the whole process.
  </div>
</div>

#### User and Group Task Overview<a id="tools/tasklist/human-workflow-management/user-and-group-task-overview"></a>

<div class="row-fluid">
  <div id="tasklist-main-info" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-main-info.png') %>"></div>
  <div class="span8">
    <p>In the User and Group Task overview you can see how many tasks are assigned to you, to the different groups and to your colleagues. Have a look in your colleagues folder. You will see that you can visualize their tasks but you are not able to work on them.</p>
    <p>The folder `Inbox` contains all tasks that are assigned to the groups of the user. Like tasks of a group they are ready to be [claimed](#tools/tasklist/human-workflow-management/un-claim-a-task).</p>
  </div>  
</div>


#### (Un-)Claim a Task<a id="tools/tasklist/human-workflow-management/un-claim-a-task"></a>

<div class="row-fluid">
  <div id="tasklist-claim" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-claim.png') %>"></div>
  <div class="span8">
    <p>If tasks are assigned to a group, more than one person sees it at once. In order to avoid different people working on it at the same time, the task needs to be claimed first. By claiming a task you become the assignee and the task is moved to your personal tasks folder ("My Tasks"). Hit the <button class="btn btn-mini dropdown-toggle"><i class="caret"></i> </button> button and select `claim`.</p>
    <p>User can also unclaim a task by selecting `unclaim`. The task will go back to the associated user group.</p>
  </div>
</div>

For bulk (un-)claim you can select multiple tasks via `strg + click`.

#### Delegate a Task<a id="tools/tasklist/human-workflow-management/delegae-a-task"></a>

<div class="row-fluid">
  <div id="tasklist-delegate" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-delegate.png') %>"></div>
  <div class="span8">
    When you delegate a task to one of your colleagues he has the possibility to take a look at your task and give it back to you. This can be helpful if you want to get help from a colleague or you need feedback. To delegate a task means not to assign it to someone else. After delegation, you are still the assignee of the task. If you do not want to be the assignee of a task, use the [(un-)claim function](#tools/tasklist/human-workflow-management/un-claim-a-task). 
  </div>  
</div>

For bulk delegation you can select multiple tasks via `strg + click`.

### User Assignment<a id="tools/tasklist/user-assignment"></a>

<div class="row-fluid">
  <div id="tasklist-task-forms" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-task-forms-eclipse.png') %>"></div>
  <div class="span8">
      <p>Tasks can be directly assigned to a user, to a canditate group (group) or to a candidate list (mutiple users). Compared to the direct assignment of tasks are the tasks of candidate groups or candidate lists are not yet assigned. They must be claimed by a user who is part of the list or belongs to the group. Dependening on this affiliation the Tasklist displays tasks in different [folders](#tools/tasklist/human-workflow-management/user-and-group-task-overview).</p>
      <p>In the properties panel in your <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a> you can configure all relevant attributes.</p>
  </div>  
</div>

To determine which user or user group is able to work with a task you can set the following extension attributes for your [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>:

* Assignee: direct assign to a user
  
          <userTask id="theTask" name="my task" camundabpm:assignee="John" ></userTask>  

* Candidate User: makes user a candidate for a task

        <userTask id="theTask" name="my task" camundabpm:candidateUsers="John, Mary" ></userTask>  

* Candidate Group: makes user groups a candidate for a task

        <userTask id="theTask" name="my task" camundabpm:candidateGroups="management, accountancy" ></userTask> 

You can define the Candidate User and the Candidate Group on the same task. Find more detailed information regarding extension attributes for [User Task here](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>.


### Task Forms<a id="tools/tasklist/task-forms"></a>

The Tasklist can work with different types of forms. To implement a Task Form in your application you have to connect the form resource with the BPMN 2.0 element in your process diagram. Suitable BPMN 2.0 elements for calling Tasks Forms are the [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> and the [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>. 

#### Embedded Task Forms<a id="tools/tasklist/task-forms/embedded-task-forms"></a>

To add an embedded Task Form to your application simply create a html file and attach it to an [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> in your process model. 
Add a folder `scr/main/webapp/forms` to your project folder and create a FORM_NAME.html file containing the relevant content for your form. The following example shows a simple form with two input fields:

      <form class="form-horizontal">
        <div class="control-group">
          <label class="control-label">Customer ID</label>
          <div class="controls">
            <input form-field type="string" name="customerId"></input>
          </div>
        </div>
        <div class="control-group">
          <label class="control-label">Amount</label>
          <div class="controls">
            <input form-field type="number" name="amount"></input>
          </div>
        </div>
      </form>

To configure the form in your process open the process in your Eclipse IDE with the <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a> and select the desired [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>. Open the properties view and enter `embedded:app:forms/FORM_NAME.html` as Form Key. The relevant XML tag looks like this:

      <userTask id="theTask" camundabpm:formKey="embedded:app:forms/FORM_NAME.html" 
                camundabpm:candidateUsers="John, Mary" 
                name="my Task">                

#### Referenced Task Forms<a id="tools/tasklist/task-forms/referenced-task-forms"></a>

If you want to call a Task From that is not part of your application you can add a reference to the desired form. The Referenced Task Form will be configured similar to the Embedded Task Form. Open the properties view and enter `FORM_NAME.html` as Form Key. The relevant XML tag looks like this:

      <userTask id="theTask" camundabpm:formKey="FORM_NAME.html" 
                camundabpm:candidateUsers="John, Mary" 
                name="my Task">                

The tasklist creates the URL by the pattern:

      "../.." + contextPath (of process application) + "/" + "app" + formKey (from BPMN 2.0 XML) + "processDefinitionKey=" + processDefinitionKey + "&callbackUrl=" + callbackUrl;

When you have completed the task the call back URL will be called.

#### Generic Task Forms<a id="tools/tasklist/task-forms/generic-task-forms"></a>

The generic form will be used whenever you have not added a dedicated form for a [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>.

<div class="row-fluid">
  <div id="tasklist-generic-form" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-generic-form.png') %>"></div>
  <div class="span8">
    Hit the <button class="btn btn-mini"><i class="icon-plus"></i> </button> button to add a variable that will be passed to the process instance upon task completion. State a variable name and select the type and you can enter the desired value. Enter as much variables as you need. 
    After hitting the `Complete Task` button the process instance contains the entered values. Generic Task Forms can be very helpful during the development stage, so you do not need to implement all Task Forms before you can run a workflow. For debugging and testing has this concept many benefits as well.
  </div>  
</div>

### Task Lifecycle<a id="tools/tasklist/task-lifecycle"></a>

<div class="row-fluid">
  <div class="span8">
      For a better understanding of the different states and task operations check the state diagram of the task lifecycle. For the implementation you get detailed information in our <a href="http://docs.camunda.org/api-references/java/?org/camunda/bpm/engine/impl/TaskServiceImpl.html">Java-API Reference</a>.
  </div>  
  <div id="tasklist-task-lifecylce-complete" class="span" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-user-task-state-complete.png') %>"></div>
</div>

## Cockpit<a id="tools/cockpit"></a>

