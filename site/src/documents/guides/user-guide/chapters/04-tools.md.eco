# Tools<a id="tools"></a>

The camunda bpm stack currently includes three web apps built on a HTML 5 plus [REST](<%= @docUrl('api-references/rest/') %>) architecture:

* [Cycle](#!/#tools/cycle) for synchronization of process models in different repositories.
* [Tasklist](#!/#tools/tasklist), a demo application for human workflow management.
* [Cockpit](#!/#tools/cockpit), a monitoring tool for process operations.

The [User Management](#!/#tools/admin) for Cockpit and Tasklist works with the engine identity service. All applications are part of our camunda BPM distribution and ready to use! 

## Cycle<a id="tools/cycle"></a>

### What is Cycle?<a id="tools/cycle/what-is-cycle"></a>

With Cycle you can synchronize the BPMN diagrams in your business analyst's BPMN tool with the technically executable BPMN 2.0 XML files your developers edit with their modeler (e.g. in Eclipse). Depending on your tool we can realize a forward- and a reverse engineering, while you can store your BPMN 2.0 XML files in different repositories (e.g. SVN, file system or FTP servers).

<div class="fullpage-preview">
  <div id="cycle-start-page-view" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-start-page-view.png') %>"></div>
</div>

Although business and IT use different BPMN tools, the process models keep in synch: With camunda Cycle you can synchronize BPMN diagrams in the tool chain anytime, for forward engineering as well as reverse engineering. By connecting and continuously synchronizing the process models in both environments, we keep business and IT aligned. This is what we call a full working BPM roundtrip.

The typical use cases are: 

* Synchronize a BPMN 2.0 diagram with an executable diagram (Forward Engineering)
* Update the executable diagram and synchronize the changes with the origin BPMN 2.0 diagram (Reverse Engineering)
* Create executable diagrams out of BPMN 2.0 diagram (Forward Engineering)

Cycle is part of our camunda BPM distribution and ready to use by opening http://localhost:8080/cycle. At first start up you will be prompt to create an admin user.
If you are new to Cycle have a look at our Hands-On <a href="http://www.camunda.org/design/cycle-tutorial.html">Cycle Tutorial</a>.

### Connector Configuration<a id="tools/cycle/connector-configuration"></a>

To connect Cycle to a suitable repository you can set up one of the following connectors: 

* [Signavio Connector](#!/#tools/cycle/connector-configuration/signavio-connector) 
* [Subversion Connector](#!/#tools/cycle/connector-configuration/subversion-connector)
* [File System Connector]((#tools/cycle/connector-configuration/file-system-connector)

Furthermore you get information about how to configure [User Credentials](#!/#tools/cycle/connector-configuration/user-credentials) for your connector.

#### Signavio Connector<a id="tools/cycle/connector-configuration/signavio-connector"></a>

For directly accessing your process models stored in Signavio, you must set up a Signavio Connector. The picture below shows a connector setup for Signavio's SaaS edition with globally provided [credentials](#!/#tools/cycle/connector-configuration/user-credentials), meaning that every Cycle user connects with the same credentials to the repository. If you are behind a proxy, you could configure that here as well.

<div class="row-fluid">
  <div id="cycle-add-signavio-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-signavio-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### Subversion Connector<a id="tools/cycle/connector-configuration/subversion-connector"></a>

Use the subversion plugin to connect to a subversion repository like SVN or Git Hub. You must specify the URL (including subfolders, if you want to directly point to a certain folder in the subversion repository). If [user credentials](#!/#tools/cycle/connector-configuration/user-credentials) are mandatory, you can provide them either globally or individually for each Cycle user. In the picture below you see a connector setup for a GitHub repository. The user credentials are provided globally. 

<div class="row-fluid">
  <div id="cycle-add-subversion-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-svn-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### File System Connector<a id="tools/cycle/connector-configuration/file-system-connector"></a>

Use the File System Connector to use models stored on your local system. Select the File System Connector as connector plugin. The variable `${user.home}` points to the directory of your OS user account. You can also choose an absolute path like `C:\MyFolder`. 

<div class="row-fluid">
  <div id="cycle-add-file-system-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-add-file-system-connector.png') %>"></div>
</div>

Hit `Test` to check if Cycle can find the folder you specified.

#### User Credentials<a id="tools/cycle/connector-configuration/user-credentials"></a>

If your repository requires a login you can choose between credentials provided by user or globally provided ones. Globally provided credentials can be set directly in the connector setup menu and are valid for every cycle user.

<div class="row-fluid">
  <div id="cycle-globally-credentials" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-globally-credentials.png') %>"></div>
</div>

To set up credentials provided by the user you need to enter the `My Profile` menu and select `add credentials` for your connector. 

<div class="row-fluid">
  <div id="cycle-user-credentials" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-user-credentials.png') %>"></div>
</div>

Hit `Test` to check if the credentials are valid. 

### BPMN 2.0 Roundtrip<a id="tools/cycle/bpmn-20-roundtrip"></a>

When we are talking about Rountrip we are talking about the synchronization of BPMN 2.0 diagrams between the business perspective and the technical perspective. This synchronization is based on the standard BPMN 2.0 XML format. As on the technical site only executable processes matter Cycle provides the functionality to extract these processes out of models from the business side where manual processes (not executable) can be modeled as well. This extraction mechanism is what we call [Pool Extraction](#!/#tools/cycle/bpmn-20-roundtrip/pool-extraction). With Cycle, you can do this synchronization in both directions. 

<h4>Step 1: Setup the Connector</h4>
<div class="row-fluid">
  <div id="cycle-signavio-connector" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-signavio-connector.png') %>" ></div>
    <div class="span8">
      <p>
        Setup a suitable connector for your repository as described in the section [Connector Configuration](#!/#tools/cycle/connector-configuration).
        In this walkthrough we use a Signavio Connector with user provided credentials.</p>
      <p> Hit `Test` to check if Cycle can access your Signavio account.</p>
    </div>
</div>
<h4>Step 2: Add process model from the repository</h4>
<div class="row-fluid">
  <div id="signavio-choose-model" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/signavio-choose-model.png') %>" ></div>
    <div class="span8">
       <p>In the left box of your roundtrip, click on `Add process Model`, pick a name for your modeling tool and choose the Signavio connector from the connector's dropdown. Cycle now connects with Signavio, so after a short time you can navigate through the chosen repository to select your process model.</p>
       <p>After you hit `Add`, Cycle will save a link to the process model you selected, and offer you a preview image in the left box of your roundtrip. It also says that the process model has not yet been synchronized, which is true. Changes on the diagram in Signavio will be updated automatically by Cycle.</p>
    </div>
</div>
<h4>Step 3: Create BPMN file for execution</h4>
<div class="row-fluid">
  <div id="cycle-create-executable" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-create-executable.png') %>" ></div>
    <div class="span8">
      <p>Hit `Create` and choose the location you want the BPMN 2.0 XML file to be stored to. In our example, we want to store it on our local file system, in a workspace we use with our Eclipse IDE. After hitting `Create`, Cycle will connect to Signavio, request the BPMN 2.0 XML and save it to the location you specified. Please note that no diagram picture will be displayed until an image file of the diagram is stored in the folder. Cycle indicates that both models are in "in synch" now.</p>
      <p><b>Heads up!</b> If your process model is a collaboration diagram, Cycle will do a [Pool Extraction](#!/#cycle-pool-extraction) which means that only pools will be regarded that are executable.</p>
  </div>
</div>
<h4>Step 4: Edit BPMN File</h4>
<div class="row-fluid">
  <div id="cycle-signavio-created" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/signavio-created.png') %>" ></div>
    <div class="span8">
      <p>Now Cycle shows you that your roundtrip consists of the BPMN diagram stored in Signavio (left side) and the BPMN 2.0 File stored in your file repository (right side). You can also see that the two process models are currently in synch, and the date and time since the last synch has been made.</p>
      <p>You can now either check out the BPMN 2.0 - XML from your subversion or open it directly in your local drive. In both cases, you can now edit inside your Eclipse IDE it using <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a>.</p>      
    </div>
</div>
<h4>Step 5: Reverse Engineering</h4>
<div class="row-fluid">
  <div id="cycle-reverse" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/cycle/cycle-reverse.png') %>" ></div>
    <div class="span8">
      <p>After you have worked on the executable process model the models are out of synch, indicated by the red label "change since last sync" on the site where the change happened.</p>
      <p>You can now hit the sync button in the corresponding direction (in our case from right to left). Afterwards you will be prompt to confirm the synchronization with the possibility to add a commit message.</p>
      <p>Now both models are synchronized again, indicated by green labels "in sync" on both sites.</p> 
    </div>
</div>
<div class="alert">
    Please note! The BPMN 2.0 modeling tool must support the complete BPMN 2.0 standard and must be able to export/serialize process diagrams in valid BPMN 2.0 XML files. 
    For more detailed information about requirements and suitable tools check the section "Roundtrip with other Tools" in our <a href="http://www.camunda.org/design/cycle-tutorial.html">Cycle Tutorial</a>.
</div>

#### Pool Extraction<a id="tools/cycle/bpmn-20-roundtrip/pool-extraction"></a>

During a roundtrip from business perspective to a technical process diagram Cycle checks which pools are flagged as "executable". Only those pools will actually be synchronized for the executable process model, so you don't have to bother with huge diagrams describing manual flows. We call this feature "Pool Extraction". 
When you synchronize the executable diagram again with the origin diagram the "non-executable" pools will be merged back into the diagram. No information gets lost. 

The following example shows relevant xml tag:

    <process id="sid-8E90631B-169F-4CD8-9C6B-1F31121D0702" name="MyPool" isExecutable="true">

#### Engine Attributes<a id="tools/cycle/bpmn-20-roundtrip/engine-attributes"></a>

An executable process model usually contains engine specific attributes in the BPMN 2.0 XML. So we have to make sure, that these attributes are not lost during a roundtrip with an other tool. The BPMN 2.0 Standard explicitly defines an extension mechanism for these attributes in the XML. That means that a proper BPMN 2.0 import and export functionality must keep the engine attributes, even if they are added as an engine extension. 

The camunda BPM Process Engine uses multitude attributes for configuration purposes which can be set up in the <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a>. Cycle retains these attributes during the roundtrip. Here is an example:

The xml export from Signavio modeler contains no engine attributes:

      <serviceTask completionQuantity="1" id="sid-01234"
                   implementation="webService"
                   isForCompensation="false"
                   name="MyService"
                   startQuantity="1"/>

 After update with camunda modeler class and failedJobRetryTimeCycle were added as camunda specific engine attributes:

      <serviceTask id="sid-01234" camunda:class="java.lang.Object"
                   camunda:async="true"
                   name="MyService" 
                   implementation="webService">
        <extensionElements>
          <camunda:failedJobRetryTimeCycle>R3/PT10M</camunda:failedJobRetryTimeCycle>
        </extensionElements>
        <incoming>sid-3DED1BA0-77FC-4768-AA3E-0B60A81850EA</incoming>
        <outgoing>sid-E6D3AB73-386C-4260-82B9-CB740B82001F</outgoing>
      </serviceTask>                   

After synchronization back to Signavio the original Signavio-information like completionQuantity, isForCompensation and startQuantity were merged back:

      <serviceTask camunda:async="true" camunda:class="java.lang.Object"
                  completionQuantity="1" 
                  id="sid-01234" 
                  isForCompensation="false" 
                  name="MyService" 
                  startQuantity="1">
         <extensionElements>
            <camunda:failedJobRetryTimeCycle xmlns:camunda="http://activiti.org/bpmn">R3/PT10M</camunda:failedJobRetryTimeCycle>
         </extensionElements>
         <incoming>sid-3DED1BA0-77FC-4768-AA3E-0B60A81850EA</incoming>
         <outgoing>sid-E6D3AB73-386C-4260-82B9-CB740B82001F</outgoing>
      </serviceTask>

## Tasklist<a id="tools/tasklist"></a>

### What is Tasklist?<a id="tools/tasklist/what-is-tasklist"></a>

The Tasklist is a demo web application to provide you with the possibility to work on User Tasks. The Tasklist is part of our camunda BPM distribution and ready to use by opening http://localhost:8080/camunda/app/tasklist.

<div class="fullpage-preview">
  <div id="tasklist-start-page" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-start-page-view.png') %>"></div>
</div>

<div class="alert">
  <p>
    <strong>Notice</strong>
    The tasklist is a demo application, only. You may use it as a basis for your own projects or as a simple inspiration to write your own.
  </p>
</div>

Find additional information about how to use the Tasklist in our <a href="http://www.camunda.org/get-started/developing-process-applications.html">Developing Process Applications</a> tutorial.

### Human Workflow Management<a id="tools/tasklist/human-workflow-management"></a>

In the following example we walk through a typical human workflow scenario. The Tasklist has four demo users which belong to different user groups. Sign in with the user _demo_ and start a process instance.

#### Start a Process<a id="tools/tasklist/human-workflow-management/start-a-process"></a>

<div class="row-fluid">
  <div id="tasklist-start-process" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-start-process.png') %>">
  </div>
  <div class="span8">
    <p>To start a process instance via the Tasklist hit the <button class="btn btn-mini"><i class="caret"></i> Start a Process </button> dropdown button and select a process. If there is no process listed please check that your process is deployed correctly.</p>
    <p>Depending on whether you have defined a [start form](#!/#tools/tasklist/task-forms) for your process it will be displayed now. Otherwise you get the notification that no form has been defined for starting the process. In this case click `Start process using generic form`. The [generic task form](#!/#tools/tasklist/task-forms/generic-task-forms) allows you to enter variables for your process.</p>
    <p>In our example you have to enter the desired values and hit `Start Process` to step through</p>
  </div>
</div>

#### Working on Tasks / Task Completion<a id="tools/tasklist/human-workflow-management/work-on-tasks"></a>

Tasks that are assigned to you are listed on the Tasklist main page where you can hit the <button class="btn btn-mini"><i class="icon-play"></i> </button> button to start working on a task. 
<div class="row-fluid">
  <div id="tasklist-form-assign-approver" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-form-assign-approver.png') %>"></div>
  <div class="span8">
     <p>In our example [task form](#!/#tools/tasklist/task-forms) you are asked to assign an approver for your invoice. Enter a colleague's name who should be assigned to approve the task. Have a look at the [Task Overview](#!/#tools/tasklist/human-workflow-management/user-and-group-task-overview). The assigned task is now in your colleague's folder.</p>
     <p>If no task form is defined for a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> you will be forwarded to a [generic form](#!/#tools/tasklist/task-forms/generic-task-forms). In a generic form you can define the input data yourself.</p>
  </div>
</div>

When you complete a task by submitting the task form, the task is completed and the process continues in the engine.

<div class="row-fluid">
  <div id="tasklist-diagram" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-diagram.png') %>"></div>
  <div class="span8">
    Furthermore you can visualize the process model by clicking on the <button class="btn btn-mini" title="Display BPMN Diagram"><i class="icon-search"></i></button> symbol. By highlighting the current task the visualization gives you also information your task on the context of the whole process.
  </div>
</div>

#### User and Group Task Overview<a id="tools/tasklist/human-workflow-management/user-and-group-task-overview"></a>

<div class="row-fluid">
  <div id="tasklist-main-info" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-main-info.png') %>"></div>
  <div class="span8">
    <p>In the User and Group Task overview you can see how many tasks are assigned to you, the different groups and your colleagues. Have a look in your colleagues' folder. You will see that you can see their tasks but you are not able to work on them.</p>
    <p>The folder `Inbox` contains all tasks that are assigned to the user groups. Like tasks of a group they are ready to be [claimed](#!/#tools/tasklist/human-workflow-management/un-claim-a-task).</p>
  </div>  
</div>


#### (Un-)Claim a Task<a id="tools/tasklist/human-workflow-management/un-claim-a-task"></a>

<div class="row-fluid">
  <div id="tasklist-claim" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-claim.png') %>"></div>
  <div class="span8">
    <p>If tasks are assigned to a group, more than one person sees it at once. In order to avoid different people working on it at the same time, the task needs to be claimed first. By claiming a task you become the assignee and the task is moved to your personal tasks folder ("My Tasks"). Hit the <button class="btn btn-mini dropdown-toggle"><i class="caret"></i> </button> button and select `claim`.</p>
    <p>User can also unclaim a task by selecting `unclaim`. The task will go back to the associated user group.</p>
  </div>
</div>

You can bulk (un-)claim tasks after selecting multiple tasks via `strg + click`.

#### Delegate a Task<a id="tools/tasklist/human-workflow-management/delegae-a-task"></a>

<div class="row-fluid">
  <div id="tasklist-delegate" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-delegate.png') %>"></div>
  <div class="span8">
    When you delegate a task to one of your colleagues he has the possibility to take a look at your task and give it back to you. This can be helpful if you want to get help from a colleague or you need feedback. To delegate a task doesn’t mean that you assign it to someone else. After delegation, you are still the assignee of the task. If you do not want to be the assignee of a task, use the [(un-)claim function](#!/#tools/tasklist/human-workflow-management/un-claim-a-task). 
  </div>  
</div>

You can bulk delegate tasks after selecting multiple tasks via `strg + click`.

### User Assignment<a id="tools/tasklist/user-assignment"></a>

<div class="row-fluid">
  <div id="tasklist-task-forms" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-task-forms-eclipse.png') %>"></div>
  <div class="span8">
      <p>Tasks can be directly assigned to a user, to a candidate group (group) or to a candidate list (multiple users). Compared to the direct assignment of tasks, the tasks of candidate groups or candidate lists are not yet assigned. They must be claimed by a user who is part of the list or belongs to the group. Depending on this affiliation the Tasklist displays tasks in different [folders](#!/#tools/tasklist/human-workflow-management/user-and-group-task-overview).</p>
      <p>In the properties panel in your <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a> you can configure all relevant attributes.</p>
  </div>  
</div>

To determine which user or user group is able to work with a task you can set the following extension attributes for your [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>:

* Assignee: direct assign to a user
  
          <userTask id="theTask" name="my task" camunda:assignee="John" ></userTask>

* Candidate User: makes user a candidate for a task

        <userTask id="theTask" name="my task" camunda:candidateUsers="John, Mary" ></userTask>

* Candidate Group: makes user groups a candidate for a task

        <userTask id="theTask" name="my task" camunda:candidateGroups="management, accountancy" ></userTask>

You can define the Candidate User and the Candidate Group on the same task. Find more detailed information regarding extension attributes for [User Task here](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>.


### Task Forms<a id="tools/tasklist/task-forms"></a>

The Tasklist can work with different types of forms. To implement a Task Form in your application you have to connect the form resource with the BPMN 2.0 element in your process diagram. Suitable BPMN 2.0 elements for calling Tasks Forms are the [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> and the [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>. 

#### Embedded Task Forms<a id="tools/tasklist/task-forms/embedded-task-forms"></a>

To add an embedded Task Form to your application simply create an html file and attach it to a [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> in your process model. 
Add a folder `scr/main/webapp/forms` to your project folder and create a FORM_NAME.html file containing the relevant content for your form. The following example shows a simple form with two input fields:

      <form class="form-horizontal">
        <div class="control-group">
          <label class="control-label">Customer ID</label>
          <div class="controls">
            <input form-field type="string" name="customerId"></input>
          </div>
        </div>
        <div class="control-group">
          <label class="control-label">Amount</label>
          <div class="controls">
            <input form-field type="number" name="amount"></input>
          </div>
        </div>
      </form>

To configure the form in your process open the process in your Eclipse IDE with the <a href="http://www.camunda.org/design/modeler.html">camunda Modeler</a> and select the desired [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>. Open the properties view and enter `embedded:app:forms/FORM_NAME.html` as Form Key. The relevant XML tag looks like this:

      <userTask id="theTask" camunda:formKey="embedded:app:forms/FORM_NAME.html"
                camunda:candidateUsers="John, Mary"
                name="my Task">                

#### Referenced Task Forms<a id="tools/tasklist/task-forms/referenced-task-forms"></a>

If you want to call a Task Form that is not part of your application you can add a reference to the desired form. The Referenced Task Form will be configured similar to the Embedded Task Form. Open the properties view and enter `FORM_NAME.html` as Form Key. The relevant XML tag looks like this:

      <userTask id="theTask" camunda:formKey="FORM_NAME.html"
                camunda:candidateUsers="John, Mary"
                name="my Task">                

The tasklist creates the URL by the pattern:

      "../.." + contextPath (of process application) + "/" + "app" + formKey (from BPMN 2.0 XML) + "processDefinitionKey=" + processDefinitionKey + "&callbackUrl=" + callbackUrl;

When you have completed the task the call back URL will be called.

#### Generic Task Forms<a id="tools/tasklist/task-forms/generic-task-forms"></a>

The generic form will be used whenever you have not added a dedicated form for a [User Task](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %> or a [Start Event](<%= @docUrl('api-references/bpmn20/#!/tasks/user-task)') %>.

<div class="row-fluid">
  <div id="tasklist-generic-form" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-generic-form.png') %>"></div>
  <div class="span8">
    Hit the <button class="btn btn-mini"><i class="icon-plus"></i> </button> button to add a variable that will be passed to the process instance upon task completion. State a variable name and select the type and enter the desired value. Enter as much variables as you need. 
    After hitting the `Complete Task` button the process instance contains the entered values. Generic Task Forms can be very helpful during the development stage, so you do not need to implement all Task Forms before you can run a workflow. For debugging and testing this concept has many benefits as well.
  </div>  
</div>

### Task Lifecycle<a id="tools/tasklist/task-lifecycle"></a>

The diagram below shows the task lifecycle and supported transitions supported by camundaBPM. 
To get to know how to programmatically work with the lifecycle in your application refer to the <a href="../../api-references/java/?org/camunda/bpm/engine/impl/TaskServiceImpl.html">Java-API Reference</a>.

<div class="fullpage-preview">
  <div id="tasklist-task-lifecylce-complete" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-tasklist/tasklist-user-task-state-complete.png') %>"></div>
</div>

## Cockpit<a id="tools/cockpit"></a>

### What is Cockpit?<a id="tools/cockpit/what-is-cockpit"></a>

With camunda BPM Cockpit you can monitor and administrate your running process instances. 
The Cockpit architecture allows using <a href="<%= @docUrl('how-tos/cockpit/develop-a-plugin/') %>">plugins</a> to extend the functionality, so you can individually adapt the tool to your personal requirements. 

<div class="fullpage-preview">
  <div id="cockpit-start-page" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-start-page-view.png') %>"></div>
</div>


### Start Page View<a id="tools/cockpit/start-page-view"></a>

On the start page of Cockpit you get an overview of the installed plugins - at least you will see the two [pre-installed plugins](#!/#tools/cockpit/start-page-view/default-plugins). Additionally installed plugins will be automatically added below the existing ones.

#### Default Plugins<a id="tools/cockpit/start-page-view/default-plugins"></a>

Cockpit comes with the following pre-configured plugins: 

##### Process Definition State Overview<a id="tools/cockpit/start-page-view/default-plugins/process-definition-state-overview"></a>

<div class="row-fluid">
  <div id="cockpit-plugin-process-definition-state-overview" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-process-definition-state.png') %>"></div>
  <div class="span8">        
    With the Process Definition State Overview plugin you can easily observe the state of a processes definition. Green and red dots signalize running and [failed jobs](#!/#tools/cockpit/failed-jobs). At this observing level a red dot signifies that there is at least one process instance or a sub process instance which has an unresolved incident. You can localize the problem by using the [Process Definitions View](#!/#tools/cockpit/process-definitions-view).
  </div>  
</div>

##### Deployed Processes<a id="tools/cockpit/start-page-view/default-plugins/deployed"></a>

<div class="row-fluid">
  <div id="cockpit-plugin-deployed-processes" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-deployed-processes.png') %>"></div>
  <div class="span8">        
    The Deployed Process plugin gives you an overview of all deployed processes on the engine and displayes them as rendered process models. In addition you get information about how many instances of the process are currently running and about the process state. Click on the model to get a [Process Definition Overview](#!/#tools/cockpit/process-definitions-view)
  </div>  
</div>

#### Multi Tenancy

<div class="row-fluid">
  <div id="cockpit-multi-engine" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-multi-engine.png') %>"></div>
  <div class="span8">
    If you are working with more than one engine you can select the desired engine via a dropdown selection. Cockpit provides all information of the selected engine.
  </div>  
</div>

### Process Definitions View<a id="tools/cockpit/process-definitions-view"></a>

<div class="row-fluid">
  <div id="cockpit-process-definitions-view" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-process-definitions-view.png') %>"></div>
  <div class="span8">
    <p>The Process Definitions View provides you information about the definition and the status of a process. On the left hand side you can easily survey the versions of the process and how many instances of the version are running. Incidents of all running process instances are displayed together with an instances counter label in the corresponding rendered diagram. So it is easy to locate [failed activities](#!/#tools/cockpit/failed-jobs) in the process. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in out. Hold the left mouse button pressed to slide the diagram in the desired direction.</p>    
    <p>In the tab `Process Instaces` all running instances are listed in a table view. Beside information about start time, business key and state you can select an instance by ID and go down to the [Process Instance Detail View](#!/#tools/cockpit/process-instance-detail-view).<br>
    The tab `Called Process Definitions` displays the called child processes. In the column <em>Called Process Definition</em> the name of the called sub processes is listed. Click on the name to display the process in the Process Definitions View. Please note that a filter called Parent is automaticaly set for the process so that you see only the instences that belongs to the parent process. In the column <em>Activity</em> you can select the instance that is calling the child process.</p>
  </div>
</div>

#### Filter<a id="tools/cockpit/process-definitions-view/filter"></a> 
  
<div class="row-fluid">
  <div id="cockpit-filter" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-filter.png') %>"></div>
  <div class="span8">
    <p>The filter function on the left hand side of the Process Definitions View allows you to find certain instances by filtering for variables, business keys or by selecting the version of a process. Beyond that you can combine different filters as logical _AND_ relation. Filter expressions on variables must be specified as `variableName OPERATOR value` where the _operator_ my be one of the following terms `=`, `!=`, `>`, `>=`, `<`, `<=`, `like`. Apart from the `like` operator the operator expressions does not have to be seperated by spaces. The `like` operator is for string variables only. You can use `%` as wildcard in the _value_ expression. String values must be properly enclosed in `""`.</p>    
  </div>    
</div>

### Process Instance Detail View<a id="tools/cockpit/process-instance-detail-view"></a>

<div class="row-fluid">
  <div id="cockpit-process-instances-detail-view" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-process-instances-detail-view.png') %>"></div>
  <div class="span8">
    <p>Open the Process Instance Detail View by selecting a process instance from the [Process Definitions View](#!/#tools/cockpit/process-definitions-view) instance list. This view allows you to drill down into a single process instance and explore it's running activities as well as the variables, tasks, jobs, etc.</p>
    <p>Beside the diagram view the process will be displayed as an [Activity Instance Tree View](#!/#tools/cockpit/process-instance-detail-view/activity-instance-tree). Variables that belong to the instance will be listed in a variables table of the [Detailed Information Panel](#!/#tools/cockpit/process-instance-detail-view/detailed-information-panel). Now you can select single or multiple ('ctrl + click') flow nodes in the interactive BPMN 2.0 diagram or you can select an activity instance within the activity tree view. As diagram, tree view and variables table correspond with each other the selected flow node will also be selected in the tree as well as the associated variables will be shown and vice versa.</p>
  </div>  
</div>

#### Activity Instance Tree<a id="tools/cockpit/process-instance-detail-view/activity-instance-tree"></a>

<div class="row-fluid">
  <div id="cockpit-activity-instance-tree-view" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-activity-instance-tree-view.png') %>"></div>
  <div class="span8">
    <p>The activity instance tree contains a node for each activity that is currently active in the process instance. It allows you to select activity instances to explore their details. Concurrently the selected instance will be marked in the rendered process diagram and the corresponding variables will be listed in the Detailed Information Panel.</p>
  </div>
</div>

#### Detailed Information Panel<a id="tools/cockpit/process-instance-detail-view/detailed-information-panel"></a>

<div class="row-fluid">
  <div id="cockpit-detailed-information-panel" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-detailed-information-view.png') %>"></div>
  <div class="span8">
    <p>Use the Detailed Information Panel to get an overview about variables, incidents, called process instances and user tasks that the process instance contains. Depending on the selected activity instance in the rendered diagram the panel lists the corresponding information. On the other way around you can focus on the activity instance via a scope link in the table.<br>
    In addition to the instance information you can [edit variables](#!/#tools/cockpit/process-instance-detail-view/editing-variables) or change the asignee of user tasks.</p> 
  </div>
</div>

#### Adding Variables<a id="">tools/cockpit/process-instance-detail-view/adding-variables</a>
<div class="row-fluid">
  <div id="cockpit-adding-variables" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-add-variables.png') %>"></div>
  <div class="span8">
    <p>Hit the <button class="btn btn-mini dropdown-toggle"><i class="icon-plus"></i> </button> button on the right hand side to add variables to a process instance. You can chosse between different data types. Please note that variable will be overwritten if you add a new variable with an existing name.</p>
  </div>
</div>

#### Editing Variables<a id="tools/cockpit/process-instance-detail-view/editing-variables"></a>

<div class="row-fluid">
  <div id="cockpit-editing-varaibles" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-edit-variables.png') %>"></div>
  <div class="span8">
    <p>Hit the <button class="btn btn-mini dropdown-toggle"><i class="icon-pencil"></i> </button> symbol in the Detailed Information Panel to edit variables. This feauture allows you to change the value of variables as well as the type. A validation of the date format and for the value of integers happens on client side. If you enter NULL the variable will be converted to string.</p>
  </div>
</div>


#### Cancel a Process Instance<a id="tools/cockpit/process-instance-detail-view/cancel-process-instance"></a>

<div class="row-fluid">
  <div id="cockpit-cancel-process-instance" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-cancel-process-instance.png') %>"></div>
  <div class="span8">
    When you select a single process instance you can cancel it in the Process Instance Detail View. <p>Hit the <button class="btn btn-mini dropdown-toggle"><i class="icon-remove-circle"></i> </button> button on the right hand side. After you have confirmed this step the [runtime data](#!/#database-table-names) of the canceld instance will be deleted.
  </div>
</div>

### Failed Jobs<a id="tools/cockpit/failed-jobs"></a>

<div class="row-fluid">
  <div id="cockpit-failed-job-drill-down" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-failed-job-drill-down.png') %>"></div>
  <div class="span8">
    <p>Unresolved incidents of a process instance or a sub process instance are indicated by Cockpit as [failed jobs](#!/#incident-types). To localize which instance of a process failed cockpit allows you to drill down to the unresolved incident by using the process status dots. Hit a red status dot of the affected instance in the Process Definitions View to get an overview about all incidents. The `incidents` tab in the [Detailed Information Panel](#!/#tools/cockpit/process-instance-detail-view/detailed-information-panel) lists the failed activities with additional information. Furthermore you have the chance to go down the failing instance of a sub process.</p>
  </div> 
</div>

#### Retry a Failed Job<a id="tools/cockpit/failed-jobs/retry-failed-job"></a>

<div class="row-fluid">
  <div id="cockpit-retry-failed-job" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-cockpit/cockpit-failed-job-retry.png') %>"></div>
  <div class="span8">
    To resolve a failed job you can use the <button class="btn btn-mini dropdown-toggle"><i class="icon-repeat"></i> </button> button on the right hand side. Select the corresponding instance in the confirmation dialog so the engine will re-trigger this jobs and incerement it's retry value in the database. 
  </div>
</div>

## Admin<a id="tools/admin"></a>

Along with the camunda webapplications we ship Admin, accessible via <a href="http://localhost:8080/camunda/app/admin/">http://localhost:8080/camunda/app/admin/</a>.
Admin is a small application that allows you to configure users and groups via the engines [Identity Service](#!/#bpmplatform/engine/identity). Furthermore you can connect camunda Admin to your [LDAP system](#!/#bpmplatform/engine/identity/ldap). 

<div class="fullpage-preview">
  <div id="admin-start-page" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-start-page-view.png') %>"></div>
</div>

### Initial User Setup<a id="tools/admin/initial-user-setup"></a>

<div class="row-fluid">
  <div id="admin-initial-setup" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-initial-user-setup.png') %>"></div>
  <div class="span8">
    <p>On first access of a process engine through Cockpit or Tasklist a setup screen will be shown. That screen allows you to configure an initial user account with administrator rights.</p> 
    <p>Administrative users are not global but per engine. Thus, you will need to set up an admin user for every single engine.</p>
  </div> 
</div>

### My Profile<a id="tools/admin/my-profile"></a>

In the My Profile menue you can edit your personal account settings like:

  * Profile: Change your name or email address. You cannot change the user account ID!
  * Account: Change your password or to delete your account. Be careful, deleting cannot be undone.
  * Groups: This menue lists all groups where you are member. With administrator right you can assign your account to available groups.

### Administrator Account<a id="tools/admin/administrator-account"></a>

Users who belonge to the group _camunda-admin_ have administrator privilegs. At least there must be one member in this group otherwise the initial setup screen appears. Beside user and group mamagement as administrator you are able to define authorization rules for users and groups to control access permissions for applications and set the visibility of useres and groups. 

In the following you will learn how to use an administrator account by the help of a simple use cases. You will create a group with two users who will be able to work together in Tasklist. 

#### Users

<div class="row-fluid">
  <div id="admin-users-menue" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-users.png') %>"></div>
  <div class="span8">
    <p>The _Users_ administration menue allows you to add, edit and delete user profiles.</p>
    <p>Login with your admin account and add two new users. Give them an unique ID and a password you can remember.</p>
  </div> 
</div>

#### Groups

<div class="row-fluid">
  <div id="admin-groups-menue" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-groups.png') %>"></div>
  <div class="span8">
    <p>The _Groups_ administration menue allows you to add, edit and delete user groups.</p>
    <p>Create a new group called _support_ and add the new users to the group. Therefore go back to the _Users_ menue and edit the new accounts. In the menue _Groups_ you can add the user to the _support_ group.</p>    
  </div> 
</div>

#### Authorization

<div class="row-fluid">
  <div id="admin-authorization-menue" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-authorization.png') %>"></div>
  <div class="span8">
    <p>Manage authorizations for users, groups and applications. Define which user or group has access to the applications, which users are visible for other groups or direct group members.</p>
  </div> 
</div>

##### Application Access

Set the authorizations for the new group and the created users. First you have to define to which application the members of your new group have access to. Select the _Application_ menue and create a new `Application Authorization` rule. The group members should be able to access Tasklist, so add the following rule:
<div class="fullpage-preview">
  <div id="admin-authorization-application-group-rule" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-authorization-application-new-group.png') %>"></div>
</div>
Now every member of the group _support_ can use Tasklist.

Furthermore you want one of the new users to get access to Cockpit. Therefore add a new user specific rule:
<div class="fullpage-preview">
  <div id="admin-authorization-application-use-rule" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-authorization-application-new-user.png') %>"></div>
</div>
This specific rule is valid for the user _lemmy_ only and provides him additional access authorization.

<div class="row-fluid">
  <div id="admin-uathorization-application-access" class="thumbnail span2" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-access.png') %>"></div>
  <div class="span8">
    <p>Login with the new user accounts and test if you can access the desired application.</p>
  </div> 
</div>

##### Member Visibility

Depending on the _users authorization_ [Tasklist](#!/#tools/tasklist/human-workflow-management/user-and-group-task-overview) will show you information about your colleagues and groups. Currently you can only see the group folder _support_ but not your colleague. To change that login to the admin application as administrator, enter the _Users Authorization_ menue and create the following rules: 

<div class="fullpage-preview">
  <div id="admin-authorization-users-rule" data-img-thumb img-src="<%= @docUrl('assets/img/implementation-admin/admin-authorization-users.png') %>"></div>
</div>
<p></p>
Now every member of the group_ support_ is able to see the new users _lemmy_ and _ozzy_.

### LDAP Connection<a id="tools/admin/LDAP-connection"></a>

If you connect the camunda BPM platform with the LDAP identity service you have read-only access to the users and groups. Changes can be down via the LDAP system but not via the admin application. Find more information about how to configure the process engine in order to use the LDAP identity service [here](#!/#bpmplatform/engine/identity/ldap).





