---

title: 'CDI Integration'
category: 'Programming Model'

---

The camunda-engine-cdi module provides programming model integration with CDI (Context and Dependency Injection). CDI is the Java EE 6 standard for Dependency Injection. The camunda-engine-cdi integration leverages both the configurability of the camunda engine and the extensibility of CDI. The most prominent features are:

 * A custom El-Resolver for resolving CDI beans (including EJBs) from the process,
 * Support for @BusinessProcessScoped beans (CDI beans the lifecycle of which is bound to a process instance),
 * Declarative control over a process instance using annotations,
 * The Process Engine is hooked-up to the CDI event bus,
 * Works with both Java EE and Java SE, works with Spring,
 * Support for unit testing.

<%- @H2('Maven Dependency') %>

In order to use the camunda-engine-cdi module inside your application, you must include the following Maven dependency:

    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-cdi</artifactId>
      <version>7.x</version>
    </dependency>

Replace 'x' with your camunda BPM version.

<%- @H2('Looking up a Process Engine') %>

The cdi extension needs to get access to a ProcessEngine. To achieve this, an implementation of the interface `org.camunda.bpm.engine.cdi.spi.ProcessEngineLookup` is looked up at runtime. The cdi module ships with a default implementation named org.camunda.bpm.engine.cdi.impl.LocalProcessEngineLookup, which uses the ProcessEngines-Utility class for looking up the ProcessEngine. In the default configuration ProcessEngines#NAME_DEFAULT is used to lookup the ProcessEngine. This class might be subclassed to set a custom name. NOTE: needs an camunda.cfg.xml configuration on the classpath.

camunda-engine-cdi uses a java.util.ServiceLoader SPI for resolving an instance of org.camunda.bpm.engine.cdi.spi.ProcessEngineLookup. In order to provide a custom implementation of the interface, we need to add a plain text file named META-INF/services/org.camunda.bpm.engine.cdi.spi.ProcessEngineLookup to our deployment, in which we specify the fully qualified classname of the implementation.

*Note:* If you do not provide a custom org.camunda.bpm.engine.cdi.spi.ProcessEngineLookup implementation, the engine will use the default LocalProcessEngineLookup implementation. In that case, all you need to do is providing a camunda.cfg.xml file on the classpath (see next section).

<%- @H2('Configuring the Process Engine') %>

Configuration depends on the selected ProcessEngineLookup-Strategy (cf. previous section). Here, we focus on the configuration options available in combination with the LocalProcessEngineLookup, which requires us to provide a Spring camunda.cfg.xml file on the classpath.

camunda offers different ProcessEngineConfiguration implementations mostly dependent on the underlying transaction management strategy. The camunda-engine-cdi module is not concerned with transactions, which means that potentially any transaction management strategy can be used (even the Spring transaction abstraction). As a convenience, the cdi-module provides two custom ProcessEngineConfiguration implementations:

* org.camunda.bpm.engine.cdi.CdiJtaProcessEngineConfiguration: a subclass of the JtaProcessEngineConfiguration, can be used if JTA-managed transactions should be used for the engine.
* org.camunda.bpm.engine.cdi.CdiStandaloneProcessEngineConfiguration: a subclass of the StandaloneProcessEngineConfiguration, can be used if plain JDBC transactions should be used for engine.

The following is an example camunda.cfg.xml file for JBoss 7:

    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

            <!-- lookup the JTA-Transaction manager -->
            <bean id="transactionManager" class="org.springframework.jndi.JndiObjectFactoryBean">
                    <property name="jndiName" value="java:jboss/TransactionManager"></property>
                    <property name="resourceRef" value="true" />
            </bean>

            <!-- process engine configuration -->
            <bean id="processEngineConfiguration"
                    class="org.camunda.bpm.engine.cdi.CdiJtaProcessEngineConfiguration">
                    <!-- lookup the default Jboss datasource -->
                    <property name="dataSourceJndiName" value="java:jboss/datasources/ExampleDS" />
                    <property name="databaseType" value="h2" />
                    <property name="transactionManager" ref="transactionManager" />
                    <!-- using externally managed transactions -->
                    <property name="transactionsExternallyManaged" value="true" />
                    <property name="databaseSchemaUpdate" value="true" />
            </bean>
    </beans>

And this is how it would look like for Glassfish 3.1.1 (assuming a datasource named jdbc/camunda is properly configured):

    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

            <!-- lookup the JTA-Transaction manager -->
            <bean id="transactionManager" class="org.springframework.jndi.JndiObjectFactoryBean">
                    <property name="jndiName" value="java:appserver/TransactionManager"></property>
                    <property name="resourceRef" value="true" />
            </bean>

            <!-- process engine configuration -->
            <bean id="processEngineConfiguration"
                    class="org.camunda.bpm.engine.cdi.CdiJtaProcessEngineConfiguration">
                    <property name="dataSourceJndiName" value="jdbc/camunda" />
                    <property name="transactionManager" ref="transactionManager" />
                    <!-- using externally managed transactions -->
                    <property name="transactionsExternallyManaged" value="true" />
                    <property name="databaseSchemaUpdate" value="true" />
            </bean>
    </beans>

Note that the above configuration requires the "spring-context" module:

    <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>3.0.3.RELEASE</version>
    </dependency>

The configuration in a Java SE environment looks exactly like the examples provided in section Creating a ProcessEngine, substitute `CdiStandaloneProcessEngineConfiguration` for `StandaloneProcessEngineConfiguration`.

<%- @H2('Contextual Process Execution with CDI') %>

In this section we briefly look at the contextual process execution model used by the camunda-engine-cdi extension. A BPMN business process is typically a long-running interaction, comprised of both user and system tasks. At runtime, a process is split-up into a set of individual units of work, performed by users and/or application logic. In camunda-engine-cdi, a process instance can be associated with a cdi scope, the association representing a unit of work. This is particularly useful, if a unit of work is complex, for instance if the implementation of a UserTask is a complex sequence of different forms and "non-process-scoped" state needs to be kept during this interaction. In the default configuration, process instances are associated with the "broadest" active scope, starting with the conversation and falling back to the request if the conversation context is not active.

<%- @H3('Associating a Conversation with a Process Instance') %>

When resolving @BusinessProcessScoped beans, or injecting process variables, we rely on an existing association between an active cdi scope and a process instance. camunda-engine-cdi provides the org.camunda.bpm.engine.cdi.BusinessProcess bean for controlling the association, most prominently:

* the startProcessBy*(...)-methods, mirroring the respective methods exposed by the RuntimeService allowing to start and subsequently associating a business process,
* resumeProcessById(String processInstanceId), allowing to associate the process instance with the provided id,
* resumeTaskById(String taskId), allowing to associate the task with the provided id (and by extension, the corresponding process instance).

Once a unit of work (for example a UserTask) is completed, the completeTask() method can be called to disassociate the conversation/request from the process instance. This signals the engine that the current task is completed and makes the process instance proceed.

Note that the BusinessProcess-bean is a @Named bean, which means that the exposed methods can be invoked using expression language, for example from a JSF page. The following JSF2 snippet begins a new conversation and associates it with a user task instance, the id of which is passed as a request parameter (e.g. `pageName.jsf?taskId=XX`):

    <f:metadata>
      <f:viewParam name="taskId" />
      <f:event type="preRenderView" listener="#{businessProcess.startTask(taskId, true)}" />
    </f:metadata>

<%- @H3('Declaratively controlling the Process') %>

camunda-engine-cdi allows declaratively starting process instances and completing tasks using annotations. The @org.camunda.bpm.engine.cdi.annotation.StartProcess annotation allows to start a process instance either by "key" or by "name". Note that the process instance is started after the annotated method returns. Example:

```
@StartProcess("authorizeBusinessTripRequest")
public String submitRequest(BusinessTripRequest request) {
  // do some work
  return "success";
}
```

Depending on the configuration of the camunda engine, the code of the annotated method and the starting of the process instance will be combined in the same transaction. The `@org.camunda.bpm.engine.cdi.annotation.CompleteTask`-annotation works in the same way:

```
  @CompleteTask(endConversation=false)
  public String authorizeBusinessTrip() {
      // do some work
      return "success";
  }
```

The `@CompleteTask` annotation offers the possibility to end the current conversation. The default behavior is to end the conversation after the call to the engine returns. Ending the conversation can be disabled, as shown in the example above.

<%- @H3('Referencing Beans from the Process') %>

The `camunda-engine-cdi` library exposes CDI beans via Expression Language, using a custom resolver. This makes it possible to reference beans from the process:

    <userTask id="authorizeBusinessTrip" name="Authorize Business Trip"
                            camunda:assignee="#{authorizingManager.account.username}" />
    </script>

Where "authorizingManager" could be a bean provided by a producer method:

```
@Inject
@ProcessVariable
private Object businessTripRequesterUsername;

@Produces
@Named
public Employee authorizingManager() {
        TypedQuery<Employee> query = entityManager.createQuery("SELECT e FROM Employee e WHERE e.account.username='"
                + businessTripRequesterUsername + "'", Employee.class);
        Employee employee = query.getSingleResult();
        return employee.getManager();
}
```

We can use the same feature to call a business method of an EJB in a service task, using the `camunda:expression="myEjb.method()"`-extension.
Note that this requires a `@Named`-annotation on the MyEjb-class.

<%- @H3('Working with @BusinessProcessScoped beans') %>

Using camunda-engine-cdi, the lifecycle of a bean can be bound to a process instance. To this extend, a custom context implementation is provided, namely the BusinessProcessContext. Instances of BusinessProcessScoped beans are stored as process variables in the current process instance. BusinessProcessScoped beans need to be PassivationCapable (for example Serializable). The following is an example of a process scoped bean:

```
@Named
@BusinessProcessScoped
public class BusinessTripRequest implements Serializable {
        private static final long serialVersionUID = 1L;
        private String startDate;
        private String endDate;
        // ...
}
```

Sometimes, we want to work with process scoped beans, in the absence of an association with a process instance, for example before starting a process. If no process instance is currently active, instances of BusinessProcessScoped beans are temporarily stored in a local scope (I.e. the Conversation or the Request, depending on the context. If this scope is later associated with a business process instance, the bean instances are flushed to the process instance.

<%- @H3('Injecting Process Variables') %>

Process variables are available for injection. camunda-engine-cdi supports

* type-safe injection of `@BusinessProcessScoped` beans using `@Inject [additional qualifiers] Type fieldName`
* unsafe injection of other process variables using the `@ProcessVariable(name?)` qualifier:

  ```
  @Inject
  @ProcessVariable
  private Object accountNumber;

  @Inject
  @ProcessVariable("accountNumber")
  private Object account;
  ```

In order to reference process variables using EL, we have similar options:

* `@Named @BusinessProcessScoped` beans can be referenced directly,
* other process variables can be referenced using the ProcessVariables-bean: `#{processVariables['accountNumber']}`

<%- @H3('Receiving Process Events') %>

The Process engine can be hooked-up to the CDI event-bus. We call this the "Cdi Event Bridge" This allows us to be notified of process events using standard CDI event mechanisms. In order to enable CDI event support for an embedded process engine, enable the corresponding parse listener in the configuration:

    <property name="postBpmnParseHandlers">
      <list>
        <bean class="org.camunda.bpm.engine.cdi.impl.event.CdiEventSupportBpmnParseListener" />
      </list>
    </property>

Now the engine is configured for publishing events using the CDI event bus.
<div class="alert alert-info">
  <p>
    <strong>Note:</strong>
    The above configuration can be used in combination with an embedded process engine. If you want to use this feature in combination with the shared process engine in a multi application environment, you need to add the CdiExecutionListener as Process Application event listener. [See next section](#cdi-receiving-process-events-process-application).
  </p>
</div>

The following gives an overview of how process events can be received in CDI beans. In CDI, we can declaratively specify event observers using the @Observes-annotation. Event notification is type-safe. The type of process events is org.camunda.bpm.engine.cdi.BusinessProcessEvent. The following is an example of a simple event observer method:

```
public void onProcessEvent(@Observes BusinessProcessEvent businessProcessEvent) {
  // handle event
}
```

This observer would be notified of all events. If we want to restrict the set of events the observer receives, we can add qualifier annotations:

* `@BusinessProcessDefinition`: restricts the set of events to a certain process definition. Example:

  ```
  @Observes
  @BusinessProcessDefinition("billingProcess")
  private BusinessProcessEvent evt;
  ```

* `@StartActivity`: restricts the set of events by a certain activity. For example:

  ```
  @Observes
  @StartActivity("shipGoods")
  private BusinessProcessEvent evt;
  ```

  is invoked whenever an activity with the id "shipGoods" is entered.

* `@EndActivity`: restricts the set of events by a certain activity. The following for example is invoked whenever an activity with the id "shipGoods" is left:

  ```java
  @Observes
  @EndActivity("shipGoods")
  private BusinessProcessEvent evt;
  ```

* `@TakeTransition`: restricts the set of events by a certain transition.

The qualifiers named above can be combined freely. For example, in order to receive all events generated when leaving the "shipGoods" activity in the "shipmentProcess", we could write the following observer method:

```
public void beforeShippingGoods(@Observes @BusinessProcessDefinition("shippingProcess") @EndActivity("shipGoods") BusinessProcessEvent evt) {
  // handle event
}
```

In the default configuration, event listeners are invoked synchronously and in the context of the same transaction. CDI transactional observers (only available in combination with JavaEE / EJB), allow to control when the event is handed to the observer method. Using transactional observers, we can for example assure that an observer is only notified if the transaction in which the event is fired succeeds:

```
public void onShipmentSuceeded(
  @Observes(during=TransactionPhase.AFTER_SUCCESS) @BusinessProcessDefinition("shippingProcess") @EndActivity("shipGoods") BusinessProcessEvent evt) {

  // send email to customer
}
```

<%- @H3('The Cdi Event Bridge in a Process Application') %>

In order to use the Cdi Event Bridge in combination with a multi-application deployment and the shared process engine, the [CdiExecutionListener](/api-references/java/org/camunda/bpm/engine/cdi/impl/event/CdiExecutionListener.html) needs to be added as a [Process Application Execution Event Listener](#bpmplatform-application-events).


<div class="alert alert-info">
  <p>
    <strong>Note:</strong>
    This configuration is not necessary if you "just" want to [reference event listeners using expression language](/api-references/bpmn20/#!/concepts/listeners) in the process. It is only required if you want to use the Cdi Event Bridge with the shared process engine. [See previous section](#cdi-receiving-process-events).
  </p>
</div>

Example configuration for [Servlet Process Application](#the-servlet-process-application):

    @ProcessApplication
    public class InvoiceProcessApplication extends ServletProcessApplication {

      protected ExecutionListener cdiExecutionListener = new CdiExecutionListener();

      public ExecutionListener getExecutionListener() {
        return cdiExecutionListener;
      }
    }

Example configuration for [Ejb Process Application](#the-ejb-process-application):

    @Singleton
    @Startup
    @ConcurrencyManagement(ConcurrencyManagementType.BEAN)
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    @ProcessApplication
    @Local(ProcessApplicationInterface.class)
    public class MyEjbProcessApplication extends EjbProcessApplication {

      protected ExecutionListener cdiExecutionListener = new CdiExecutionListener();

      @PostConstruct
      public void start() {
        deploy();
      }

      @PreDestroy
      public void stop() {
        undeploy();
      }

      public ExecutionListener getExecutionListener() {
        return cdiExecutionListener;
      }
    }


<%- @H2('Additional Features') %>

* The ProcessEngine as well as the services are available for injection: `@Inject` ProcessEngine, RepositoryService, TaskService, ...
* The current process instance and task can be injected: @Inject ProcessInstance, Task,
* The current business key can be injected: @Inject @BusinessKey String businessKey,
* The current process instance id be injected: @Inject @ProcessInstanceId String pid.