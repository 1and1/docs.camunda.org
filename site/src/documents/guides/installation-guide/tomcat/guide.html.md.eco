camunda BPM Installation Guide (Tomcat 7)
=========================================

This document will guide you through the installation of camunda BPM and its components on a <a href="http://tomcat.apache.org/">Apache Tomcat 7 Server</a>.

<div class="alert alert-info">
  <strong>Reading the Guide</strong> Throughout this guide we will use a number of variables to denote common path names and constants.
  <code>$CATALINA_HOME</code> points to the main directory of the tomcat server.
  <code>$PLATFORM_VERSION</code> denotes the version of the camunda BPM platform you want to or have installed, e.g. <code>7.0.0</code>.
  <code>$TOMCAT_DISTRIBUTION</code> represents the downloaded pre-packaged camunda BPM distribution for Tomcat, e.g. <code>camunda-bpm-tomcat-$PLATFORM_VERSION.zip</code> or <code>camunda-bpm-tomcat-$PLATFORM_VERSION.tar.gz</code>.
</div>


<a id="platform"></a>Installing the pre-built distro
----------------------------------------------------

1. Download the pre-packaged distribution from http://www.camunda.org/download/camunda-bpm/tomcat/VERSION/zip/.
   Replace VERSION with the current camunda BPM version.
2. Unpack the distro to a directory.
3. Adjust the datasource according to your needs (see below).
4. Startup the server by running `camunda-welcome.bat` or using the `$TOMCAT_HOME/bin/startup.{bat/sh}` script.


<a id="vanilla"></a>Installing the platform on a vanilla Tomcat
---------------------------------------------------------------

This section will describe how you can install the camunda BPM platform on a [vanilla Tomcat 7](http://tomcat.apache.org/), if you are not able to use the pre-packaged Tomcat distribution. Regardless we recommand you to [download a Tomcat 7 distribution](http://camunda.org/download/) to use the required modules.

### <a id="database-camunda-bpm-platform"></a>Create the database schema for camunda BPM platform

If you do not want to use the H2 database, you first have to create a database schema for camunda BPM platform. The camunda BPM distribution ships with a set of SQL create scripts that can be executed by a database administrator. 

The database creation scripts are reside in the `sql/create` folder:

`$TOMCAT_DISTRIBUTION/sql/create/*_engine_$PLATFORM_VERSION.sql`
`$TOMCAT_DISTRIBUTION/sql/create/*_identity_$PLATFORM_VERSION.sql`

There is an individual SQL script for each supported database. Select the script appropriate for your database and run it with your database administration tool. (e.g. SqlDeveloper for Oracle).

### Configuring JDBC Resource

To configure a JDBC Resource you have to edit the file `$TOMCAT_HOME/conf/server.xml`. This could like the following example for H2 database:

    <Server>
      ...
      <GlobalNamingResources>
        ...
        <Resource name="jdbc/ProcessEngine"
                  auth="Container"
                  type="javax.sql.DataSource" 
                  factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
                  uniqueResourceName="process-engine"
                  driverClassName="org.h2.Driver" 
                  url="jdbc:h2:./camunda-h2-dbs/process-engine;MVCC=TRUE;TRACE_LEVEL_FILE=0"
                  username="sa"  
                  password=""  
                  maxPoolSize="20"  
                  minPoolSize="5" />
      </GlobalNamingResources>
    </Server>

### Add necessary libraries to vanilla Tomcat 7

First you have to copy the following libraries into your vanilla Tomcat library folder `$TOMCAT_HOME/lib`:

`$TOMCAT_DISTRIBUTION/lib/camunda-engine-$PLATFORM_VERSION.jar`

`$TOMCAT_DISTRIBUTION/lib/java-uuid-generator-VERSION.jar`

`$TOMCAT_DISTRIBUTION/lib/joda-time-VERSION.jar`

`$TOMCAT_DISTRIBUTION/lib/mybatis-VERSION.jar`

Furthermore you have to merge your corresponding JDBC driver into the folder `$TOMCAT_HOME/lib`.

### Add bpm-platform.xml

You have to add the file `bpm-platform.xml` into the folder `$TOMCAT_HOME/conf`:

      <?xml version="1.0" encoding="UTF-8"?>
      <bpm-platform xmlns="http://www.camunda.org/schema/1.0/BpmPlatform"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.camunda.org/schema/1.0/BpmPlatform http://www.camunda.org/schema/1.0/BpmPlatform ">

        <job-executor>
          <job-acquisition name="default" />
        </job-executor>

        <process-engine name="default">
          <job-acquisition>default</job-acquisition>
          <configuration>org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration</configuration>
          <datasource>java:jdbc/ProcessEngine</datasource>

          <properties>
              <property name="history">full</property>
              <property name="databaseSchemaUpdate">true</property>
          </properties>

        </process-engine>

      </bpm-platform>

### Add listener to bootstrap camunda BPM platform

To bootstrap the camunda BPM platform you have to edit the file `$CATALINA_HOME/conf/server.xml` and add the following listener:

    <Server>
      ...
      <Listener className="org.camunda.bpm.container.impl.tomcat.TomcatBpmPlatformBootstrap" />
    </Server>

### Provide JNDI Bindings for Bpm Platform Services

In order to use the [JNDI Bindings for Bpm Platform Services on Tomcat](<%= @docUrl("guides/user-guide/") %>#jndi-bindings-services-tomcat) you have to edit the file `$CATALINA_HOME/conf/server.xml` and add the following Resources:

    <Server>
      ...
      <GlobalNamingResources>
        ...
      	<Resource name=
            "global/camunda-bpm-platform/process-engine/ProcessEngineService!org.camunda.bpm.ProcessEngineService"
      		auth="Container"
      		type="org.camunda.bpm.ProcessEngineService"
      		description="camunda BPM platform Process Engine Service"
      		factory="org.camunda.bpm.container.impl.jndi.ProcessEngineServiceObjectFactory" />
      	          
      	<Resource name=
            "global/camunda-bpm-platform/process-engine/ProcessApplicationService!org.camunda.bpm.ProcessApplicationService"
      		auth="Container"
      		type="org.camunda.bpm.ProcessApplicationService"
      		description="camunda BPM platform Process Application Service"
      		factory="org.camunda.bpm.container.impl.jndi.ProcessApplicationServiceObjectFactory" />
      </GlobalNamingResources>
    </Server>

<a id="rest"></a>Installing the REST API web application
--------------------------------------------------------

To install the REST API, a Tomcat installation with the `org.camunda.bpm.camunda-engine` module is required.
See above, how to [install the pre-built distro](#platform) or [install the platform on a vanilla Tomcat](#vanilla).

**Note**: The distro already ships the REST API exposing it on the context path `/engine-rest`.

The following steps are required to deploy the REST API on a Tomcat instance:

1. Download the REST API web application archive from [our server](https://app.camunda.com/nexus/content/groups/public/org/camunda/bpm/camunda-engine-rest/).
   Choose the correct version named `$PLATFORM_VERSION/camunda-engine-rest-$PLATFORM_VERSION-tomcat.war`.
2. Copy the war file to `$CATALINA_HOME/webapps`. 
   Optionally you may rename it or extract it to a folder to deploy it to a specific context like `/engine-rest`.
3. Startup Tomcat.
4. Access the REST API on the context you configured. 
   For example, http://localhost:8080/engine-rest/engine should return the names of all engines of the platform, 
   if you deployed the application in the context `/engine-rest`.


<a id="cycle"></a>Installing camunda cycle
------------------------------------------

**Note**: The distro already ships camunda cycle. It may be accessed on the context path `/cycle`. See [here](#configure_prepackaged_cycle), how to configure the distro.

### Create the database schema for camunda cycle ###

Unless you are using the pre-packaged distribution and do not want to exchange the packaged H2 database, you first have to create a database schema for camunda cycle.
The camunda BPM distribution ships with a set of SQL create scripts that can be executed by a database administrator.

The database creation scripts reside in the `sql/create` folder:
    
    camunda-bpm-tomcat-$PLATFORM_VERSION.zip/sql/create/*_cycle_$PLATFORM_VERSION.sql

There is an individual SQL script for each supported database. Select the script appropriate for your database and run it with your database administration tool. (e.g. SqlDeveloper for Oracle).

We recommend to create a separate database or database schema for camunda cycle.

<div class="alert alert-info">
  If you have not got the distro at hand, you can also download a file that packages these
  scripts from <a href="https://app.camunda.com/nexus/content/groups/public/org/camunda/bpm/cycle/camunda-cycle-sql-scripts/">our server</a>.
  Choose the correct version named `$PLATFORM_VERSION/camunda-cycle-sql-scripts-$PLATFORM_VERSION.war`.
</div>

### <a id="configure_prepackaged_cycle"></a>Configuring the pre-packaged distribution ###
The distribution comes with a preconfigured H2 database used by cycle.

The H2 JDBC driver is located at `camunda-bpm-tomcat-$PLATFORM_VERSION.zip/server/apache-tomcat-VERSION/lib/h2-VERSION.jar`.

#### Exchange the database ####
To exchange the preconfigured H2 database with your own, e.g. Oracle, you have to do the following:

1. Copy your JDBC database driver JAR file to `$CATALINA_HOME/lib`.
2. Open `$CATALINA_HOME/webapps/cycle/META-INF/context.xml` and edit the properties of the `jdbc/CycleDS` datasource definition.

### Install camunda cycle on vanilla Tomcat 7 ###
You can download the camunda cycle web application from [our sever](https://app.camunda.com/nexus/content/groups/public/org/camunda/bpm/cycle/camunda-cycle-tomcat/).
Choose the correct version named `$PLATFORM_VERSION/camunda-cycle-tomcat-$PLATFORM_VERSION.war`.

#### Create a datasource ####
The cycle datasource is configured in the cycle web application in the file `META-INF/context.xml`. It should be named `jdbc/CycleDS`.

In order to use a custom datasource name, you have to edit the file `WEB-INF/classes/META-INF/cycle-persistence.xml` in the cycle web application file.

In order to use the `org.apache.tomcat.jdbc.pool.DataSourceFactory`, you need to add the driver of the database you use to the `$CATALINA_HOME/lib` folder.
For example, if you plan to use the h2 database, you would have to add the h2-VERSION.jar.

<div class="alert alert-info">
  <strong>Tomcat 6.x</strong>
  <br/>
  On Tomcat 6, you will also have to add the tomcat-jdbc.jar, which ships with Tomcat 7 and the pre-packaged camunda BPM distribution, to
  `$CATALINA_HOME/lib`.
</div>

#### Install the web application ####
1. Copy the cycle war file to `$CATALINA_HOME/webapps`.
   Optionally you may rename it or extract it to a folder to deploy it to a specific context like `/cycle`.
2. Startup Tomcat.
3. Access camunda cycle on the context you configured. If cycle is installed correctly, a screen should appear that allows you to create an initial user. 
   The initial user has administrator privileges and can be used to create more users once you have logged in.
   
### Configuring cycle ###
#### Configuring email ####
**Note**: This step is optional and can be skipped if you do not require cycle to send a welcome email to newly created users.

<div class="alert alert-info">
  You need to install the java mail library when NOT using the prepackaged distribution.
  Download version 1.4.x manually from http://mvnrepository.com/artifact/javax.mail/mail and copy it into your `$CATALINA_HOME/lib` folder.
</div>

In order to use the cycle email service, you have to configure a mail session in the `META-INF/context.xml` file in the cycle web application.

By default, cycle looks up a mail session using the JNDI Name `mail/Session`.
The name of the mail session to look up can be changed by editing the following file in the cycle web application:

    WEB-INF/classes/spring/configuration.xml
    
The file defines a Spring Bean named `cycleConfiguration`. On this spring bean, set the JNDI name of the Mail Session to a custom name:

    <bean id="cycleConfiguration" class="org.camunda.bpm.cycle.configuration.CycleConfiguration">
	  [...]   
	  <!-- cycle email service configuration -->
	  <property name="emailFrom" value="cycle@localhost" />
	  <property name="mailSessionName" value="my/mail/Session" />
	  [...]        
    </bean>
    
#### Configuring Connector Password Encryption ####
Connector passwords are encrypted before they are stored in the cycle database using the PBEWithMD5AndDES algorithm implementation.
<div class="alert alert-info">
  <strong>Encryption key</strong>
  <br/>
  Cycle uses a default key to encrypt passwords (contained in the source code and hence not really secure).
  If you want to improve security you can exchange the encryption password by creating a file `$USER_HOME/cycle.password`
  containing a self chosen plain ASCII password.
</div>

<a id="camunda"></a>Installing camunda cockpit and tasklist
-----------------------------------------------------------

To install camunda cockpit and tasklist, a Tomcat installation with the `org.camunda.bpm.camunda-engine` module is required.
See above, how to [install the pre-built distro](#platform) or [install the platform on a vanilla Tomcat](#vanilla).

**Note**: The distro already ships the applications. They may be accessed via `/camunda/app/cockpit` and `/camunda/app/tasklist`, respectively.

The following steps are required to deploy the applications on a JBoss instance:

1. Download the camunda web application that contains both applications from [our server](https://app.camunda.com/nexus/content/groups/public/org/camunda/bpm/webapp/camunda-webapp-tomcat/).
   Choose the correct version named `$PLATFORM_VERSION/camunda-webapp-tomcat-$PLATFORM_VERSION.war`.
2. Copy the war file to `$CATALINA_HOME/webapps/camunda.war`.
   Optionally you may name it differently or extract it to a folder to deploy it to a different context path.
3. Startup Tomcat.
4. Access cockpit and tasklist via `/camunda/app/cockpit` and `/camunda/app/tasklist` or under the context path you configured.
