---

title: 'Service Task'
category: 'Tasks'

keywords: 'service task implementation field injections results'

---


<p>A service task is used to invoke services. In camunda this is done by calling Java code.</p>

<div data-bpmn-symbol="servicetask"  data-bpmn-symbol-name="Service Task"> </div>

There are 4 ways of declaring how to invoke Java logic:
<ul >
  <li>Specifying a class that implements JavaDelegate or ActivityBehavior</li>
  <li>Evaluating an expression that resolves to a delegation object</li>
  <li>Invoking a method expression</li>
  <li>Evaluating a value expression</li>
</ul>
 
<p>  
  To specify a class that is called during process execution, the fully qualified classname needs to be provided by the <code>camunda:class</code> attribute.
</p>

<div class="app-source" app-source-no-tabs="service-task-delegate" ></div>
<script type="text/xml" id="service-task-delegate">
<serviceTask id="javaService" 
             name="My Java Service Task" 
             camunda:class="org.camunda.bpm.MyJavaDelegate" />
</script>

<p>
	See the implementation section further down for more details on how to use such a class.
</p>

<p>
	It is also possible to use an expression that resolves to an object.
	This object must follow the same rules as objects that are created
	when the <code>camunda:class</code> attribute is used.
</p>

<div class="app-source" app-source-no-tabs="service-task-expression-delegate"></div>
<script type="text/xml" id="service-task-expression-delegate">
<serviceTask id="serviceTask" camunda:delegateExpression="${delegateExpressionBean}" />
</script>


<p>
	Here, the	<code>delegateExpression</code> is an expression that resolves to a bean implementing the <code>JavaDelegate</code>
	interface. Beans can be resolved for example via CDI or Spring (see below).
</p>
<p>
	To specify an expression that should be evaluated, use attribute <class>camunda:expression</class>.
</p>

<div class="app-source" app-source-no-tabs="service-task-expression"></div>
<script type="text/xml" id="service-task-expression">
<serviceTask id="javaService" 
             name="My Java Service Task" 
             camunda:expression="#{printer.printMessage()}" />
</script>

<p>
	Method <code>printMessage</code> (without parameters) will be called on the named bean called <code>printer</code>.
</p>
<p>
  It's also possible to pass parameters with an method used in the expression.
</p>

<div class="app-source" app-source-no-tabs="service-task-expression-params"></div>
<script type="text/xml" id="service-task-expression-params">
<serviceTask id="javaService" 
             name="My Java Service Task" 
             camunda:expression="#{printer.printMessage(execution, myVar)}" />
</script>

  <p>
		Method <code>printMessage</code> will be called on the object named <code>printer</code>. 
    The first parameter passed is the	<code>DelegateExecution</code>, which is available in the expression context by default available as
		<code>execution</code>. The second parameter passed, is the value of the variable with name	<code>myVar</code>
		in the current execution.
	</p>
	<p>
		To specify a UEL value expression that should be evaluated, use
		attribute <span class="bold"><strong>camunda:expression</strong></span>.
  </p>

    <div class="app-source" app-source-no-tabs="service-task-expression-value"></div>
    <script type="text/xml" id="service-task-expression-value">
<serviceTask id="javaService" 
             name="My Java Service Task" 
             camunda:expression="#{split.ready}"
             camunda:resultVariable="myVar" />
    </script>

	<p>
		The getter method of property <code>ready</code>,	<code>getReady</code>	(without parameters), will be called on the named bean called
		<code>split</code>. The named objects are resolved in the execution's process variables	and (if applicable) in the CDI or Spring context.
  </p>
  <p>
    Note that you can store the return value of the method in a process variable by specifying the <code>camunda:resultVariable</code>
	</p>


<h2>Using Java Delegate Class</h2>


Please refer to <a href="<%= @docUrl('guides/user-guide/#process-engine-the-job-executor-failed-jobs') %>">Java Delegate</a> for details.


<h2>Generic Java Delegates &amp Field Injection</h2>


You can easily write generic Java Delegate classes with can later on be configured via the BPMN 2.0 XML in the Service Task. Please refer to 
<a href="<%= @docUrl('guides/user-guide/#process-engine-the-job-executor-failed-jobs') %>">Field Injection</a> for details.


<h2>Service task results</h2>

<p>
	The return value of a service execution (for service task using
	expression only) can be assigned to an already existing or to a new
	process variable by specifying the process variable name as a literal
	value for the <code>'camunda:resultVariable'</code>
	attribute of a service task definition. Any existing value for a
	specific process variable will be overwritten by the result value of
	the service execution. When not specifying a result variable name, the
	service execution result value gets ignored.
</p>

  <div class="app-source" app-source-no-tabs="service-task-results"></div>
  <script type="text/xml" id="service-task-results">
<serviceTask id="aMethodExpressionServiceTask"
           camunda:expression="#{myService.doSomething()}"
           camunda:resultVariable="myVar" />
  </script>

<p>
	In the example above, the result of the service execution (the return
	value of the <code>doSomething()</code> method invocation on object 'myService') is set to the process variable named
  <code>myVar</code> after the service execution completes.
</p>


<h2>Additional Resources</h2>

<ul>            
  <li><a href="http://camunda.org/design/reference.html#!/activities/tasks">Tasks in the BPMN Tutorial<a></li>
  <li><a href="https://app.camunda.com/confluence/display/foxUserGuide/Error+Handling">Error Handling</a></li>
  <li><a href="http://www.bpm-guide.de/2010/12/09/how-to-call-a-webservice-from-bpmn/">How to call Web Services from BPMN</a></li>
</ul>      
